type Activity implements Node {
  createdAt: DateTime!
  databaseId: Int!
  id: ID!
  itemable: ActivityItemable!
  itemableType: ActivityItemableType!
  user: User!
}

"""
The connection type for Activity.
"""
type ActivityConnection {
  """
  A list of edges.
  """
  edges: [ActivityEdge]

  """
  A list of nodes.
  """
  nodes: [Activity]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ActivityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Activity
}

type ActivityGroup implements Node {
  activities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ActivityConnection!
  activitiesCount: Int!
  createdAt: DateTime!
  databaseId: Int!
  id: ID!
  itemableType: ActivityItemableType!
  single: Boolean!
  user: User!
}

"""
The connection type for ActivityGroup.
"""
type ActivityGroupConnection {
  """
  A list of edges.
  """
  edges: [ActivityGroupEdge]

  """
  A list of nodes.
  """
  nodes: [ActivityGroup]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ActivityGroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ActivityGroup
}

union ActivityItemable = AnimeRecord | EpisodeRecord | Status

enum ActivityItemableType {
  """
  """
  ANIME_RECORD

  """
  """
  EPISODE_RECORD

  """
  """
  STATUS
}

input ActivityOrder {
  direction: OrderDirection!
  field: ActivityOrderField!
}

enum ActivityOrderField {
  """
  作成日時
  """
  CREATED_AT
}

"""
作品情報
"""
type Anime implements Node {
  animeRecords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    hasBody: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: AnimeRecordOrder
  ): AnimeRecordConnection
  animeRecordsCount: Int!
  animeRecordsWithBodyCount: Int!
  casts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: CastOrder
  ): CastConnection
  copyright: String

  """
  Annict ID
  """
  databaseId: Int!
  episodes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: EpisodeOrder
  ): EpisodeConnection
  episodesCount: Int!
  id: ID!
  image: AnimeImage!
  isNoEpisodes: Boolean!
  malAnimeId: String
  media: Media!
  officialSiteUrl: String
  officialSiteUrlEn: String
  programs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: ProgramOrder
  ): ProgramConnection

  """
  評価数
  """
  ratingsCount: Int!
  satisfactionRate: Float
  seasonSlug: String
  seasonType: Season
  seasonYear: Int
  seriesList(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SeriesConnection
  slots(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: SlotOrder
  ): SlotConnection
  staffs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: StaffOrder
  ): StaffConnection
  startedOn: Date
  synopsis: String!
  synopsisEn: String!
  synopsisEnHtml: String!
  synopsisHtml: String!
  synopsisSource: String!
  synopsisSourceEn: String!
  syobocalTid: String

  """
  タイトル
  """
  title: String!

  """
  タイトル (別名)
  """
  titleAlter: String

  """
  タイトル (別名/英語)
  """
  titleAlterEn: String

  """
  タイトル (英語)
  """
  titleEn: String

  """
  タイトル (かな)
  """
  titleKana: String
  titleRo: String @deprecated(reason: "このフィールドは使われていません。 `titleEn` を使用してください。")
  trailers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: TrailerOrder
  ): TrailerConnection
  twitterHashtag: String
  twitterUsername: String
  viewerFinishedToWatch: Boolean!
  viewerStatusKind: StatusKind
  watchersCount: Int!
  wikipediaUrl: String
  wikipediaUrlEn: String
}

"""
The connection type for Anime.
"""
type AnimeConnection {
  """
  A list of edges.
  """
  edges: [AnimeEdge]

  """
  A list of nodes.
  """
  nodes: [Anime]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AnimeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Anime
}

type AnimeImage implements Node {
  anime: Anime
  databaseId: Int
  facebookOgImageUrl: String
  id: ID!

  """
  このフィールドの値は公開されていません
  """
  internalUrl(size: String!): String!
  recommendedImageUrl: String
  twitterAvatarUrl: String
  twitterBiggerAvatarUrl: String
  twitterMiniAvatarUrl: String
  twitterNormalAvatarUrl: String
}

input AnimeOrder {
  direction: OrderDirection!
  field: AnimeOrderField!
}

enum AnimeOrderField {
  """
  作成日時
  """
  CREATED_AT

  """
  シーズン
  """
  SEASON

  """
  視聴者数
  """
  WATCHERS_COUNT
}

type AnimeRecord implements Node {
  anime: Anime!
  body: String!
  bodyHtml: String!
  createdAt: DateTime!
  databaseId: Int!
  id: ID!
  likesCount: Int!
  modifiedAt: DateTime
  ratingAnimationState: RatingState
  ratingCharacterState: RatingState
  ratingMusicState: RatingState
  ratingOverallState: RatingState
  ratingStoryState: RatingState
  record: Record!
  title: String
  updatedAt: DateTime!
  user: User!
  viewerDidLike: Boolean!
}

"""
The connection type for AnimeRecord.
"""
type AnimeRecordConnection {
  """
  A list of edges.
  """
  edges: [AnimeRecordEdge]

  """
  A list of nodes.
  """
  nodes: [AnimeRecord]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AnimeRecordEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AnimeRecord
}

input AnimeRecordOrder {
  direction: OrderDirection!
  field: AnimeRecordOrderField!
}

enum AnimeRecordOrderField {
  """
  作成日時
  """
  CREATED_AT

  """
  いいね数
  """
  LIKES_COUNT
}

type Cast implements Node {
  """
  出演者名。出演当時と名前が異なる場合新旧2つの名前を併記する。例: 長島雄一 (チョー)
  """
  accurateName: String!

  """
  出演者名 (英)。出演当時と名前が異なる場合新旧2つの名前を併記する。例: Nagashima, Yuuichi (Cho)
  """
  accurateNameEn: String!
  anime: Anime!
  character: Character!
  databaseId: Int!
  id: ID!

  """
  出演者名
  """
  name: String!

  """
  出演者名 (英語)
  """
  nameEn: String!
  person: Person!

  """
  ソート番号
  """
  sortNumber: Int!
}

"""
The connection type for Cast.
"""
type CastConnection {
  """
  A list of edges.
  """
  edges: [CastEdge]

  """
  A list of nodes.
  """
  nodes: [Cast]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CastEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Cast
}

input CastOrder {
  direction: OrderDirection!
  field: CastOrderField!
}

enum CastOrderField {
  """
  作成日時
  """
  CREATED_AT

  """
  ソート番号
  """
  SORT_NUMBER
}

type Channel implements Node {
  channelGroup: ChannelGroup!
  databaseId: Int!
  id: ID!
  name: String!

  """
  しょぼいカレンダーのチャンネルID
  """
  scChid: Int!
  slots(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SlotConnection
}

"""
The connection type for Channel.
"""
type ChannelConnection {
  """
  A list of edges.
  """
  edges: [ChannelEdge]

  """
  A list of nodes.
  """
  nodes: [Channel]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ChannelEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Channel
}

type ChannelGroup implements Node {
  channels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChannelConnection
  databaseId: Int!
  id: ID!
  name: String!

  """
  ソート番号
  """
  sortNumber: Int!
}

type Character implements Node {
  age: String!
  ageEn: String!
  birthday: String!
  birthdayEn: String!
  bloodType: String!
  bloodTypeEn: String!
  databaseId: Int!
  description: String!
  descriptionEn: String!
  descriptionSource: String!
  descriptionSourceEn: String!
  favoriteUsersCount: Int!
  height: String!
  heightEn: String!
  id: ID!
  name: String!
  nameEn: String!
  nameKana: String!
  nationality: String!
  nationalityEn: String!
  nickname: String!
  nicknameEn: String!
  occupation: String!
  occupationEn: String!
  series: Series
  weight: String!
  weightEn: String!
}

"""
The connection type for Character.
"""
type CharacterConnection {
  """
  A list of edges.
  """
  edges: [CharacterEdge]

  """
  A list of nodes.
  """
  nodes: [Character]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CharacterEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Character
}

type CharacterFavorite implements Node {
  character: Character!
  createdAt: DateTime!

  """
  ID of the object.
  """
  id: ID!
  user: User!
}

"""
The connection type for CharacterFavorite.
"""
type CharacterFavoriteConnection {
  """
  A list of edges.
  """
  edges: [CharacterFavoriteEdge]

  """
  A list of nodes.
  """
  nodes: [CharacterFavorite]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CharacterFavoriteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CharacterFavorite
}

input CharacterFavoriteOrder {
  direction: OrderDirection!
  field: CharacterFavoriteOrderField!
}

enum CharacterFavoriteOrderField {
  """
  登録日時
  """
  CREATED_AT
}

input CharacterOrder {
  direction: OrderDirection!
  field: CharacterOrderField!
}

enum CharacterOrderField {
  """
  作成日時
  """
  CREATED_AT

  """
  お気に入り数
  """
  FAVORITE_USERS_COUNT
}

"""
Autogenerated input type of CreateAnimeRecord
"""
input CreateAnimeRecordInput {
  animeId: ID!

  """
  作品への感想
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  作品への評価
  """
  ratingAnimationState: RatingState

  """
  作品への評価
  """
  ratingCharacterState: RatingState

  """
  作品への評価
  """
  ratingMusicState: RatingState

  """
  作品への評価
  """
  ratingOverallState: RatingState

  """
  作品への評価
  """
  ratingStoryState: RatingState

  """
  作品への記録をTwitterでシェアするかどうか
  """
  shareToTwitter: Boolean
}

"""
Autogenerated return type of CreateAnimeRecord
"""
type CreateAnimeRecordPayload {
  animeRecord: AnimeRecord

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateEpisodeRecord
"""
input CreateEpisodeRecordInput {
  """
  エピソードへの感想
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  episodeId: ID!

  """
  [非推奨] 旧レーティング。今後は `rating_state` を使用してください。
  """
  rating: Float

  """
  エピソードへの評価
  """
  ratingState: RatingState

  """
  エピソードへの記録をTwitterでシェアするかどうか
  """
  shareToTwitter: Boolean
}

"""
Autogenerated return type of CreateEpisodeRecord
"""
type CreateEpisodeRecordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  episodeRecord: EpisodeRecord
}

scalar Date

scalar DateTime

"""
Autogenerated input type of DeleteAnimeRecord
"""
input DeleteAnimeRecordInput {
  animeRecordId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteAnimeRecord
"""
type DeleteAnimeRecordPayload {
  anime: Anime

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteEpisodeRecord
"""
input DeleteEpisodeRecordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  episodeRecordId: ID!
}

"""
Autogenerated return type of DeleteEpisodeRecord
"""
type DeleteEpisodeRecordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  episode: Episode
}

"""
エピソード情報
"""
type Episode implements Node {
  anime: Anime!
  databaseId: Int!
  episodeRecordBodiesCount: Int!
  episodeRecords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    hasBody: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: EpisodeRecordOrder
  ): EpisodeRecordConnection
  episodeRecordsCount: Int!
  id: ID!
  nextEpisode: Episode
  number: Float
  numberText: String
  prevEpisode: Episode

  """
  満足度
  """
  satisfactionRate: Float
  sortNumber: Int!
  title: String
  titleEn: String
  viewerDidTrack: Boolean!
  viewerRecordsCount: Int!
}

"""
The connection type for Episode.
"""
type EpisodeConnection {
  """
  A list of edges.
  """
  edges: [EpisodeEdge]

  """
  A list of nodes.
  """
  nodes: [Episode]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type EpisodeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Episode
}

input EpisodeOrder {
  direction: OrderDirection!
  field: EpisodeOrderField!
}

enum EpisodeOrderField {
  """
  作成日時
  """
  CREATED_AT

  """
  ソート番号
  """
  SORT_NUMBER
}

type EpisodeRecord implements Node {
  anime: Anime!
  body: String
  bodyHtml: String
  commentsCount: Int!
  createdAt: DateTime!
  databaseId: Int!
  episode: Episode!
  facebookClickCount: Int!
  id: ID!
  likesCount: Int!
  modified: Boolean!
  rating: Float
  ratingState: RatingState
  record: Record!
  twitterClickCount: Int!
  updatedAt: DateTime!
  user: User!
}

"""
The connection type for EpisodeRecord.
"""
type EpisodeRecordConnection {
  """
  A list of edges.
  """
  edges: [EpisodeRecordEdge]

  """
  A list of nodes.
  """
  nodes: [EpisodeRecord]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type EpisodeRecordEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EpisodeRecord
}

input EpisodeRecordOrder {
  direction: OrderDirection!
  field: EpisodeRecordOrderField!
}

enum EpisodeRecordOrderField {
  """
  作成日時
  """
  CREATED_AT

  """
  いいね数
  """
  LIKES_COUNT
}

"""
Autogenerated input type of LikeAnimeRecord
"""
input LikeAnimeRecordInput {
  animeRecordId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of LikeAnimeRecord
"""
type LikeAnimeRecordPayload {
  animeRecord: AnimeRecord!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
メディア
"""
enum Media {
  """
  映画
  """
  MOVIE

  """
  その他
  """
  OTHER

  """
  OVA
  """
  OVA

  """
  テレビ
  """
  TV

  """
  Web
  """
  WEB
}

type Mutation {
  createAnimeRecord(input: CreateAnimeRecordInput!): CreateAnimeRecordPayload
  createEpisodeRecord(input: CreateEpisodeRecordInput!): CreateEpisodeRecordPayload
  deleteAnimeRecord(input: DeleteAnimeRecordInput!): DeleteAnimeRecordPayload
  deleteEpisodeRecord(input: DeleteEpisodeRecordInput!): DeleteEpisodeRecordPayload
  likeAnimeRecord(input: LikeAnimeRecordInput!): LikeAnimeRecordPayload
  unlikeAnimeRecord(input: UnlikeAnimeRecordInput!): UnlikeAnimeRecordPayload
  updateAnimeRecord(input: UpdateAnimeRecordInput!): UpdateAnimeRecordPayload
  updateEpisodeRecord(input: UpdateEpisodeRecordInput!): UpdateEpisodeRecordPayload
  updateStatus(input: UpdateStatusInput!): UpdateStatusPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

enum OrderDirection {
  """
  昇順
  """
  ASC

  """
  降順
  """
  DESC
}

type Organization implements Node {
  databaseId: Int!
  favoriteUsersCount: Int!
  id: ID!
  name: String!
  nameEn: String!
  nameKana: String!
  staffsCount: Int!
  twitterUsername: String!
  twitterUsernameEn: String!
  url: String!
  urlEn: String!
  wikipediaUrl: String!
  wikipediaUrlEn: String!
}

"""
The connection type for Organization.
"""
type OrganizationConnection {
  """
  A list of edges.
  """
  edges: [OrganizationEdge]

  """
  A list of nodes.
  """
  nodes: [Organization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization
}

type OrganizationFavorite implements Node {
  createdAt: DateTime!

  """
  ID of the object.
  """
  id: ID!
  organization: Organization!
  user: User!
  watchedAnimeCount: Int!
}

"""
The connection type for OrganizationFavorite.
"""
type OrganizationFavoriteConnection {
  """
  A list of edges.
  """
  edges: [OrganizationFavoriteEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationFavorite]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type OrganizationFavoriteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OrganizationFavorite
}

input OrganizationFavoriteOrder {
  direction: OrderDirection!
  field: OrganizationFavoriteOrderField!
}

enum OrganizationFavoriteOrderField {
  """
  登録日時
  """
  CREATED_AT

  """
  見た作品数
  """
  WATCHED_ANIME_COUNT
}

input OrganizationOrder {
  direction: OrderDirection!
  field: OrganizationOrderField!
}

enum OrganizationOrderField {
  """
  作成日時
  """
  CREATED_AT

  """
  お気に入り数
  """
  FAVORITE_USERS_COUNT
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Person implements Node {
  birthday: String!
  bloodType: String!
  castsCount: Int!
  databaseId: Int!
  favoriteUsersCount: Int!
  genderText: String!
  height: String!
  id: ID!
  name: String!
  nameEn: String!
  nameKana: String!
  nickname: String!
  nicknameEn: String!
  prefecture: Prefecture!
  staffsCount: Int!
  twitterUsername: String!
  twitterUsernameEn: String!
  url: String!
  urlEn: String!
  wikipediaUrl: String!
  wikipediaUrlEn: String!
}

"""
The connection type for Person.
"""
type PersonConnection {
  """
  A list of edges.
  """
  edges: [PersonEdge]

  """
  A list of nodes.
  """
  nodes: [Person]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PersonEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Person
}

type PersonFavorite implements Node {
  createdAt: DateTime!

  """
  ID of the object.
  """
  id: ID!
  person: Person!
  user: User!
  watchedAnimeCount: Int!
}

"""
The connection type for PersonFavorite.
"""
type PersonFavoriteConnection {
  """
  A list of edges.
  """
  edges: [PersonFavoriteEdge]

  """
  A list of nodes.
  """
  nodes: [PersonFavorite]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PersonFavoriteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PersonFavorite
}

input PersonFavoriteOrder {
  direction: OrderDirection!
  field: PersonFavoriteOrderField!
}

enum PersonFavoriteOrderField {
  """
  登録日時
  """
  CREATED_AT

  """
  見た作品数
  """
  WATCHED_ANIME_COUNT
}

input PersonOrder {
  direction: OrderDirection!
  field: PersonOrderField!
}

enum PersonOrderField {
  """
  作成日時
  """
  CREATED_AT

  """
  お気に入り数
  """
  FAVORITE_USERS_COUNT
}

type Prefecture implements Node {
  databaseId: Int!
  id: ID!
  name: String!
}

type Program implements Node {
  anime: Anime!
  channel: Channel!
  databaseId: Int!
  id: ID!
  rebroadcast: Boolean!
  slots(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: SlotOrder
  ): SlotConnection
  startedAt: DateTime!
  vodTitleCode: String!
  vodTitleName: String!
  vodTitleUrl: String!
}

"""
The connection type for Program.
"""
type ProgramConnection {
  """
  A list of edges.
  """
  edges: [ProgramEdge]

  """
  A list of nodes.
  """
  nodes: [Program]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ProgramEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Program
}

input ProgramOrder {
  direction: OrderDirection!
  field: ProgramOrderField!
}

enum ProgramOrderField {
  """
  開始日時
  """
  STARTED_AT
}

type Query {
  activityGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: ActivityOrder
  ): ActivityGroupConnection
  animeList(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    databaseIds: [Int!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: AnimeOrder
    seasons: [String!]
    titles: [String!]
  ): AnimeConnection
  channels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    isVod: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChannelConnection
  characters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    databaseIds: [Int!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    names: [String!]
    orderBy: CharacterOrder
  ): CharacterConnection
  episodes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    databaseIds: [Int!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: EpisodeOrder
  ): EpisodeConnection

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    databaseIds: [Int!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    names: [String!]
    orderBy: OrganizationOrder
  ): OrganizationConnection
  people(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    databaseIds: [Int!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    names: [String!]
    orderBy: PersonOrder
  ): PersonConnection
  user(username: String!): User

  """
  認証されているユーザ
  """
  viewer: User
}

enum RatingState {
  """
  普通
  """
  AVERAGE

  """
  良くない
  """
  BAD

  """
  良い
  """
  GOOD

  """
  とても良い
  """
  GREAT
}

type Record implements Node {
  anime: Anime!
  createdAt: DateTime!
  databaseId: Int!
  id: ID!
  itemable: RecordItemable!
  itemableType: RecordItemableType!
  modifiedAt: DateTime
  user: User!
}

"""
The connection type for Record.
"""
type RecordConnection {
  """
  A list of edges.
  """
  edges: [RecordEdge]

  """
  A list of nodes.
  """
  nodes: [Record]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RecordEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Record
}

union RecordItemable = AnimeRecord | EpisodeRecord

enum RecordItemableType {
  """
  """
  ANIME_RECORD

  """
  """
  EPISODE_RECORD
}

input RecordOrder {
  direction: OrderDirection!
  field: RecordOrderField!
}

enum RecordOrderField {
  """
  作成日時
  """
  CREATED_AT
}

"""
シーズン
"""
enum Season {
  """
  秋
  """
  AUTUMN

  """
  春
  """
  SPRING

  """
  夏
  """
  SUMMER

  """
  冬
  """
  WINTER
}

type Series implements Node {
  animeList(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: SeriesAnimeOrder
  ): SeriesAnimeConnection
  databaseId: Int!
  id: ID!
  name: String!
  nameEn: String!
}

"""
The connection type for Anime.
"""
type SeriesAnimeConnection {
  """
  A list of edges.
  """
  edges: [SeriesAnimeEdge]

  """
  A list of nodes.
  """
  nodes: [Anime]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SeriesAnimeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: Anime!
  summary: String!
  summaryEn: String!
}

input SeriesAnimeOrder {
  direction: OrderDirection!
  field: SeriesAnimeOrderField!
}

enum SeriesAnimeOrderField {
  """
  シーズン
  """
  SEASON
}

"""
The connection type for Series.
"""
type SeriesConnection {
  """
  A list of edges.
  """
  edges: [SeriesEdge]

  """
  A list of nodes.
  """
  nodes: [Series]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SeriesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Series
}

type Slot implements Node {
  anime: Anime!
  channel: Channel!
  databaseId: Int!
  episode: Episode!
  id: ID!
  rebroadcast: Boolean!
  scPid: Int
  startedAt: DateTime!
}

"""
The connection type for Slot.
"""
type SlotConnection {
  """
  A list of edges.
  """
  edges: [SlotEdge]

  """
  A list of nodes.
  """
  nodes: [Slot]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SlotEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Slot
}

input SlotOrder {
  direction: OrderDirection!
  field: SlotOrderField!
}

enum SlotOrderField {
  """
  開始日時
  """
  STARTED_AT
}

type Staff implements Node {
  """
  担当者名。名義が異なる場合2つの名前を併記する。例: ふでやすかずゆき (筆安一幸)
  """
  accurateName: String!

  """
  担当者名 (英)。名義が異なる場合2つの名前を併記する。
  """
  accurateNameEn: String!
  anime: Anime!
  databaseId: Int!
  id: ID!
  name: String!
  nameEn: String!
  resource: StaffResourceItem!
  role: String!
  roleEn: String!
  sortNumber: Int!
}

"""
The connection type for Staff.
"""
type StaffConnection {
  """
  A list of edges.
  """
  edges: [StaffEdge]

  """
  A list of nodes.
  """
  nodes: [Staff]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type StaffEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Staff
}

input StaffOrder {
  direction: OrderDirection!
  field: StaffOrderField!
}

enum StaffOrderField {
  """
  作成日時
  """
  CREATED_AT

  """
  ソート番号
  """
  SORT_NUMBER
}

union StaffResourceItem = Organization | Person

type Status implements Node {
  anime: Anime!
  createdAt: DateTime!
  databaseId: Int!
  id: ID!
  kind: StatusKind!
  likesCount: Int!
  user: User!
}

enum StatusKind {
  """
  見た
  """
  COMPLETED

  """
  視聴中止
  """
  DROPPED

  """
  未設定
  """
  NO_STATUS

  """
  一時中断
  """
  ON_HOLD

  """
  見たい
  """
  PLAN_TO_WATCH

  """
  見てる
  """
  WATCHING
}

type Trailer implements Node {
  anime: Anime!
  databaseId: Int!
  id: ID!

  """
  このフィールドの値は公開されていません
  """
  internalImageUrl(size: String!): String
  isYoutube: Boolean!
  sortNumber: Int!
  title: String!
  titleEn: String!
  url: String!
}

"""
The connection type for Trailer.
"""
type TrailerConnection {
  """
  A list of edges.
  """
  edges: [TrailerEdge]

  """
  A list of nodes.
  """
  nodes: [Trailer]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TrailerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Trailer
}

input TrailerOrder {
  direction: OrderDirection!
  field: TrailerOrderField!
}

enum TrailerOrderField {
  """
  ソート番号
  """
  SORT_NUMBER
}

"""
Autogenerated input type of UnlikeAnimeRecord
"""
input UnlikeAnimeRecordInput {
  animeRecordId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UnlikeAnimeRecord
"""
type UnlikeAnimeRecordPayload {
  animeRecord: AnimeRecord!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateAnimeRecord
"""
input UpdateAnimeRecordInput {
  animeRecordId: ID!

  """
  作品への感想
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  作品への評価
  """
  ratingAnimationState: RatingState!

  """
  作品への評価
  """
  ratingCharacterState: RatingState!

  """
  作品への評価
  """
  ratingMusicState: RatingState!

  """
  作品への評価
  """
  ratingOverallState: RatingState!

  """
  作品への評価
  """
  ratingStoryState: RatingState!

  """
  作品への記録をFacebookでシェアするかどうか
  """
  shareFacebook: Boolean

  """
  作品への記録をTwitterでシェアするかどうか
  """
  shareTwitter: Boolean
}

"""
Autogenerated return type of UpdateAnimeRecord
"""
type UpdateAnimeRecordPayload {
  animeRecord: AnimeRecord

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateEpisodeRecord
"""
input UpdateEpisodeRecordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  エピソードへの感想
  """
  comment: String
  episodeRecordId: ID!

  """
  エピソードへの評価
  """
  ratingState: RatingState

  """
  エピソードへの記録をFacebookでシェアするかどうか
  """
  shareFacebook: Boolean

  """
  エピソードへの記録をTwitterでシェアするかどうか
  """
  shareTwitter: Boolean
}

"""
Autogenerated return type of UpdateEpisodeRecord
"""
type UpdateEpisodeRecordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  episodeRecord: EpisodeRecord
}

"""
Autogenerated input type of UpdateStatus
"""
input UpdateStatusInput {
  animeId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  kind: StatusKind!
}

"""
Autogenerated return type of UpdateStatus
"""
type UpdateStatusPayload {
  anime: Anime

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type User implements Node {
  activities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: ActivityOrder
  ): ActivityConnection
  activityGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: ActivityOrder
  ): ActivityGroupConnection
  animeList(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    databaseIds: [Int!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: AnimeOrder
    seasons: [String!]
    statusKind: StatusKind
    titles: [String!]
  ): AnimeConnection

  """
  ユーザのアバター画像のURL
  """
  avatarUrl(size: UserAvatarSize!): String
  backgroundImageUrl: String
  castFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: PersonFavoriteOrder
  ): PersonFavoriteConnection
  characterFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: CharacterFavoriteOrder
  ): CharacterFavoriteConnection
  characterFavoritesCount: Int!
  completedAnimeCount: Int!
  createdAt: DateTime!
  databaseId: Int!
  description: String!
  displaySupporterBadge: Boolean!
  droppedAnimeCount: Int!
  email: String
  episodeRecords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    hasBody: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: EpisodeRecordOrder
  ): EpisodeRecordConnection
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
  followersCount: Int!
  following(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
  followingActivities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: ActivityOrder
  ): ActivityConnection
  followingActivityGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: ActivityOrder
  ): ActivityGroupConnection
  followingCount: Int!
  id: ID!
  isCommitter: Boolean!
  isSupporter: Boolean!
  locale: String
  name: String!
  notificationsCount: Int
  onHoldAnimeCount: Int!
  organizationFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: OrganizationFavoriteOrder
  ): OrganizationFavoriteConnection
  organizationFavoritesCount: Int!
  personFavoritesCount: Int!
  planToWatchAnimeCount: Int!
  records(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    month: String
    orderBy: RecordOrder
  ): RecordConnection
  recordsCount: Int!
  slots(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: SlotOrder
    unwatched: Boolean
  ): SlotConnection
  staffFavorites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: PersonFavoriteOrder
  ): PersonFavoriteConnection
  url: String
  username: String!
  viewerCanFollow: Boolean!
  viewerIsFollowing: Boolean!
  watchingAnimeCount: Int!
}

"""
ユーザのアバター画像の大きさ
"""
enum UserAvatarSize {
  """
  100x100
  """
  size100

  """
  150x150
  """
  size150

  """
  200x200
  """
  size200

  """
  50x50
  """
  size50
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}